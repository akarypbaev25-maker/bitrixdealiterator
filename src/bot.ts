import { Telegraf, Markup } from "telegraf";
import dotenv from "dotenv";
import { BitrixClient } from "./bitrixClient";
import { DealService, UserField } from "./dealService";
import { info, warn, error } from "./logger";
import fs from "fs";
import path from "path";

dotenv.config();

const BOT_TOKEN = process.env.TG_BOT_TOKEN;
if (!BOT_TOKEN) {
  console.error("TG_BOT_TOKEN is not set in env");
  process.exit(1);
}

const bot = new Telegraf(BOT_TOKEN);

// session store in memory per chat id
type Session = {
  step?: string;
  categories?: Array<any>;
  category?: any;
  stages?: Array<any>;
  stage?: any;
  fields?: UserField[];
  field?: UserField | null;
  fieldType?: "enum" | "string";
  enumValues?: Array<{ ID: string; VALUE?: string; NAME?: string }>;
  useEnumMode?: "cycle" | "single";
  chosenEnumId?: string | null;
  stringPattern?: string | null;
  maxDeals?: number | null;
  dryRun?: boolean | null;
};
const sessions = new Map<number, Session>();

const TOKENS_FILE = path.join(process.cwd(), "tokens.json");

function getSession(ctx: any): Session {
  const id = ctx.chat.id;
  if (!sessions.has(id)) sessions.set(id, {});
  return sessions.get(id)!;
}

// Helpers
async function createClientIfConfigured(): Promise<BitrixClient> {
  const client = new BitrixClient(true);
  if (!client.isConfigured()) throw new Error("Bitrix tokens not found. Use /set_tokens or install the app in Bitrix.");
  return client;
}

// start
bot.start(async (ctx) => {
  sessions.set(ctx.chat.id, {});
  await ctx.reply("–ü—Ä–∏–≤–µ—Ç! –Ø –±–æ—Ç-–∏–Ω—Ç–µ—Ä—Ñ–µ–π—Å –¥–ª—è –º–∞—Å—Å–æ–≤–æ–π —Ä–∞–∑–º–µ—Ç–∫–∏ —Å–¥–µ–ª–æ–∫ (–ø–æ 150).", Markup.keyboard([
    ["üöÄ –ó–∞–ø—É—Å—Ç–∏—Ç—å –æ–±—Ä–∞–±–æ—Ç–∫—É —Å–¥–µ–ª–æ–∫"],
    ["‚öôÔ∏è –£—Å—Ç–∞–Ω–æ–≤–∏—Ç—å —Ç–æ–∫–µ–Ω—ã (—Ä—É—á–Ω–æ–π)"],
    ["‚ÑπÔ∏è –°—Ç–∞—Ç—É—Å"],
  ]).resize());
});

// status
bot.hears(["‚ÑπÔ∏è –°—Ç–∞—Ç—É—Å", "/status"], async (ctx) => {
  const session = getSession(ctx);
  const tokensExist = fs.existsSync(TOKENS_FILE);
  const parts = [
    `Tokens present: ${tokensExist ? "‚úÖ" : "‚ùå"}`,
    `Selected category: ${session.category?.NAME ?? "‚Äî"}`,
    `Selected stage: ${session.stage?.NAME ?? "‚Äî"}`,
    `Selected field: ${session.field?.FIELD_NAME ?? "‚Äî"}`,
    `Field type: ${session.fieldType ?? "‚Äî"}`,
  ];
  await ctx.reply(parts.join("\n"));
});

// set tokens manual
bot.hears(["‚öôÔ∏è –£—Å—Ç–∞–Ω–æ–≤–∏—Ç—å —Ç–æ–∫–µ–Ω—ã (—Ä—É—á–Ω–æ–π)", "/set_tokens"], async (ctx) => {
  const chatId = ctx.chat.id;
  const session = getSession(ctx);
  session.step = "awaiting_tokens_domain";
  await ctx.reply("–í–≤–µ–¥–∏—Ç–µ domain (–Ω–∞–ø—Ä–∏–º–µ—Ä yourportal.bitrix24.ru):");
});

// token entry flow
bot.on("text", async (ctx) => {
  const session = getSession(ctx);
  const text = (ctx.message && (ctx.message as any).text) || "";

  try {
    // token manual flow
    if (session.step === "awaiting_tokens_domain") {
      session.step = "awaiting_tokens_access";
      session as any; // eslint
      (session as any).tmpDomain = text.trim();
      await ctx.reply("–í–≤–µ–¥–∏—Ç–µ access_token:");
      return;
    }
    if (session.step === "awaiting_tokens_access") {
      const domain = (session as any).tmpDomain;
      const access = text.trim();
      session.step = undefined;
      // optional: ask for refresh
      await ctx.reply("–ï—Å–ª–∏ –µ—Å—Ç—å refresh_token, –≤–≤–µ–¥–∏—Ç–µ –µ–≥–æ —Å–µ–π—á–∞—Å (–∏–ª–∏ –æ—Ç–ø—Ä–∞–≤—å—Ç–µ –ø—É—Å—Ç–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ Enter):");
      session.step = "awaiting_tokens_refresh";
      (session as any).tmpAccess = access;
      return;
    }
    if (session.step === "awaiting_tokens_refresh") {
      const domain = (session as any).tmpDomain;
      const access = (session as any).tmpAccess;
      const refresh = text.trim() || null;
      const tokens = {
        domain,
        access_token: access,
        refresh_token: refresh,
        received_at: Date.now()
      };
      fs.writeFileSync(TOKENS_FILE, JSON.stringify(tokens, null, 2), "utf-8");
      session.step = undefined;
      await ctx.reply("–¢–æ–∫–µ–Ω—ã —Å–æ—Ö—Ä–∞–Ω–µ–Ω—ã –≤ tokens.json ‚úÖ");
      return;
    }

    // field index flow (when we sent numbered list and asked to reply with index)
    if (session.step === "awaiting_field_index") {
      const idx = Number(text.trim());
      if (Number.isNaN(idx) || !session.fields || idx < 0 || idx >= session.fields.length) {
        await ctx.reply("–ù–µ–≤–µ—Ä–Ω—ã–π –∏–Ω–¥–µ–∫—Å –ø–æ–ª—è. –í–≤–µ–¥–∏—Ç–µ –∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–π –∏–Ω–¥–µ–∫—Å –∏–∑ —Å–ø–∏—Å–∫–∞.");
        return;
      }
      session.field = session.fields[idx];
      // determine type
      const ut = (session.field as any).USER_TYPE_ID ?? (session.field as any).TYPE;
      if (ut === "enumeration" || ((session.field as any).LIST && Array.isArray((session.field as any).LIST) && (session.field as any).LIST.length > 0)) {
        session.fieldType = "enum";
        // fetch enum values
        try {
          const clientTmp = await createClientIfConfigured();
          const svcTmp = new DealService(clientTmp);
          const enums = await svcTmp.getEnumValuesForField(session.field!);
          session.enumValues = enums;
        } catch (err) {
          session.enumValues = (session.field as any).LIST ?? [];
        }

        if (!session.enumValues || session.enumValues.length === 0) {
          await ctx.reply("–ü–æ–ª–µ enum –Ω–µ —Å–æ–¥–µ—Ä–∂–∏—Ç –≤–∞—Ä–∏–∞–Ω—Ç–æ–≤. –í—ã–±–µ—Ä–∏—Ç–µ –¥—Ä—É–≥–æ–µ –ø–æ–ª–µ –∏–ª–∏ –∏—Å–ø–æ–ª—å–∑—É–π—Ç–µ —Å—Ç—Ä–æ–∫–æ–≤–æ–µ –ø–æ–ª–µ.");
          session.step = undefined;
          return;
        }

        // ask mode: cycle or single value
        session.step = "awaiting_enum_mode";
        await ctx.reply("–í—ã–±–µ—Ä–∏—Ç–µ —Ä–µ–∂–∏–º –¥–ª—è enum –ø–æ–ª—è:\n1 ‚Äî –¶–∏–∫–ª–∏—á–µ—Å–∫–∏ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å –≤–∞—Ä–∏–∞–Ω—Ç—ã (—Ä–µ–∫–æ–º–µ–Ω–¥–æ–≤–∞–Ω–æ)\n2 ‚Äî –í—ã–±—Ä–∞—Ç—å –æ–¥–∏–Ω –≤–∞—Ä–∏–∞–Ω—Ç –¥–ª—è –≤—Å–µ—Ö –≥—Ä—É–ø–ø\n–û—Ç–ø—Ä–∞–≤—å—Ç–µ 1 –∏–ª–∏ 2.");
        return;
      } else {
        // string field
        session.fieldType = "string";
        session.step = "awaiting_string_pattern";
        await ctx.reply("–í–≤–µ–¥–∏—Ç–µ —Å—Ç—Ä–æ–∫–æ–≤—ã–π —à–∞–±–ª–æ–Ω –¥–ª—è –≥—Ä—É–ø–ø. –ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ {n} –∫–∞–∫ placeholder –¥–ª—è –Ω–æ–º–µ—Ä–∞ –≥—Ä—É–ø–ø—ã.\n–ü—Ä–∏–º–µ—Ä: 'Group {n}' –∏–ª–∏ –ø—Ä–æ—Å—Ç–æ '{n}' (–ø–æ —É–º–æ–ª—á–∞–Ω–∏—é).");
        return;
      }
    }

    if (session.step === "awaiting_enum_mode") {
      const v = text.trim();
      if (v !== "1" && v !== "2") {
        await ctx.reply("–û—Ç–ø—Ä–∞–≤—å—Ç–µ 1 –∏–ª–∏ 2.");
        return;
      }
      if (v === "1") {
        session.useEnumMode = "cycle";
        session.step = "awaiting_max";
        await ctx.reply("–†–µ–∂–∏–º: —Ü–∏–∫–ª–∏—á–µ—Å–∫–∏–π. –í–≤–µ–¥–∏—Ç–µ –º–∞–∫—Å–∏–º—É–º —Å–¥–µ–ª–æ–∫ –¥–ª—è –æ–±—Ä–∞–±–æ—Ç–∫–∏ (Enter = –≤—Å–µ):");
        return;
      } else {
        session.useEnumMode = "single";
        // present enum values numbered for selection
        const lines = session.enumValues!.map((ev, i) => `${i}: ID=${ev.ID} -> ${ev.VALUE ?? ev.NAME}`);
        await ctx.reply("–í–∞—Ä–∏–∞–Ω—Ç—ã enum:\n" + lines.join("\n"));
        session.step = "awaiting_enum_index";
        await ctx.reply(`–í–≤–µ–¥–∏—Ç–µ –∏–Ω–¥–µ–∫—Å –≤–∞—Ä–∏–∞–Ω—Ç–∞ (0..${session.enumValues!.length - 1}):`);
        return;
      }
    }

    if (session.step === "awaiting_enum_index") {
      const idx = Number(text.trim());
      if (Number.isNaN(idx) || !session.enumValues || idx < 0 || idx >= session.enumValues.length) {
        await ctx.reply("–ù–µ–≤–µ—Ä–Ω—ã–π –∏–Ω–¥–µ–∫—Å. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ —Å–Ω–æ–≤–∞.");
        return;
      }
      session.chosenEnumId = session.enumValues[idx].ID;
      session.step = "awaiting_max";
      await ctx.reply("–í–≤–µ–¥–∏—Ç–µ –º–∞–∫—Å–∏–º—É–º —Å–¥–µ–ª–æ–∫ –¥–ª—è –æ–±—Ä–∞–±–æ—Ç–∫–∏ (Enter = –≤—Å–µ):");
      return;
    }

    if (session.step === "awaiting_string_pattern") {
      const pattern = text.trim() || "{n}";
      session.stringPattern = pattern;
      session.step = "awaiting_max";
      await ctx.reply("–í–≤–µ–¥–∏—Ç–µ –º–∞–∫—Å–∏–º—É–º —Å–¥–µ–ª–æ–∫ –¥–ª—è –æ–±—Ä–∞–±–æ—Ç–∫–∏ (Enter = –≤—Å–µ):");
      return;
    }

    if (session.step === "awaiting_max") {
      const max = text.trim() ? Number(text.trim()) : Infinity;
      session.maxDeals = max;
      session.step = "awaiting_dry";
      await ctx.reply("Dry run? –û—Ç–ø—Ä–∞–≤—å—Ç–µ yes (–ø–æ —É–º–æ–ª—á–∞–Ω–∏—é) –∏–ª–∏ no:");
      return;
    }

    if (session.step === "awaiting_dry") {
      const dry = !text.trim() ? true : (String(text.trim()).toLowerCase().startsWith("y"));
      session.dryRun = dry;
      session.step = "confirm_run";
      // show summary
      const summary = [
        `–°–≤–æ–¥–∫–∞ –ø–µ—Ä–µ–¥ –∑–∞–ø—É—Å–∫–æ–º:`,
        `–í–æ—Ä–æ–Ω–∫–∞: ${session.category?.NAME ?? "‚Äî"}`,
        `–°—Ç–∞–¥–∏—è: ${session.stage?.NAME ?? "‚Äî"}`,
        `–ü–æ–ª–µ: ${session.field?.FIELD_NAME ?? "‚Äî"}`,
        `–¢–∏–ø –ø–æ–ª—è: ${session.fieldType}`,
        session.fieldType === "string" ? `–®–∞–±–ª–æ–Ω: ${session.stringPattern}` : session.useEnumMode === "cycle" ? `Enum: cycling ${session.enumValues!.length} values` : `Enum: single ID=${session.chosenEnumId}`,
        `Max deals: ${session.maxDeals === Infinity ? "all" : session.maxDeals}`,
        `Dry run: ${session.dryRun ? "yes" : "no"}`
      ].join("\n");
      await ctx.reply(summary);
      await ctx.reply("–ü–æ–¥—Ç–≤–µ—Ä–¥–∏—Ç—å –∑–∞–ø—É—Å–∫? –û—Ç–ø—Ä–∞–≤—å—Ç–µ 'yes' –∏–ª–∏ 'no'.");
      return;
    }

    if (session.step === "confirm_run") {
      const yes = String(text.trim()).toLowerCase().startsWith("y");
      if (!yes) {
        session.step = undefined;
        await ctx.reply("–û–ø–µ—Ä–∞—Ü–∏—è –æ—Ç–º–µ–Ω–µ–Ω–∞.");
        return;
      }
      // proceed to run: must have client configured
      try {
        const client = new BitrixClient(true);
        if (!client.isConfigured()) {
          await ctx.reply("Bitrix –Ω–µ –Ω–∞—Å—Ç—Ä–æ–µ–Ω (–Ω–µ—Ç —Ç–æ–∫–µ–Ω–æ–≤). –£—Å—Ç–∞–Ω–æ–≤–∏—Ç–µ —Ç–æ–∫–µ–Ω—ã —á–µ—Ä–µ–∑ /set_tokens –∏–ª–∏ —É—Å—Ç–∞–Ω–æ–≤–∏—Ç–µ –ª–æ–∫–∞–ª—å–Ω–æ–µ –ø—Ä–∏–ª–æ–∂–µ–Ω–∏–µ –≤ Bitrix.");
          session.step = undefined;
          return;
        }
        const svc = new DealService(client);
        // fetch deals with filter
        const filter: any = { CATEGORY_ID: Number(session.category.ID), STAGE_ID: session.stage.STATUS_ID ?? session.stage.ID };
        await ctx.reply("–ó–∞–≥—Ä—É–∂–∞–µ–º —Å–¥–µ–ª–∫–∏ (—ç—Ç–æ –º–æ–∂–µ—Ç –∑–∞–Ω—è—Ç—å –≤—Ä–µ–º—è)...");
        const deals = await svc.fetchDealsPaginated(filter, ["*", "UF_*"], { DATE_CREATE: "ASC" }, session.maxDeals ?? Infinity);
        await ctx.reply(`–ù–∞–π–¥–µ–Ω–æ —Å–¥–µ–ª–æ–∫: ${deals.length}`);
        if (!deals.length) {
          session.step = undefined;
          return;
        }

        // progress callback sends messages after each group
        let lastGroupTime = Date.now();
        await svc.tagDealsByGroups(deals, session.field!.FIELD_NAME, {
          fieldType: session.fieldType === "string" ? "string" : "enum",
          enumValues: session.fieldType === "enum" ? (session.useEnumMode === "cycle" ? session.enumValues!.map(ev => ev.ID) : [session.chosenEnumId!]) : undefined,
          chunkSize: 150,
          dryRun: !!session.dryRun,
          stringPattern: session.stringPattern ?? "{n}",
          progressCb: async (info) => {
            // throttle updates to not spam the chat too often
            const now = Date.now();
            if (now - lastGroupTime < 2000) return;
            lastGroupTime = now;
            await ctx.reply(`–ì—Ä—É–ø–ø–∞ ${info.groupIndex}/${info.totalGroups} –æ–±—Ä–∞–±–æ—Ç–∞–Ω–∞ ‚Äî –æ–±—Ä–∞–±–æ—Ç–∞–Ω–æ ${info.processed} –∏–∑ ${deals.length}`);
          }
        });

        await ctx.reply(`‚úÖ –û–±—Ä–∞–±–æ—Ç–∫–∞ –∑–∞–≤–µ—Ä—à–µ–Ω–∞. (dry=${session.dryRun ? "yes" : "no"})`);
        session.step = undefined;
        return;
      } catch (err: any) {
        error("Processing error:", err);
        await ctx.reply(`–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ: ${String(err.message || err)}`);
        session.step = undefined;
        return;
      }
    }

    // If no session step matched: ignore or help
  } catch (err: any) {
    console.error("Bot handler error:", err);
    await ctx.reply("–ü—Ä–æ–∏–∑–æ—à–ª–∞ –≤–Ω—É—Ç—Ä–µ–Ω–Ω—è—è –æ—à–∏–±–∫–∞. –°–º–æ—Ç—Ä–∏—Ç–µ –ª–æ–≥–∏.");
  }
});

// Run flow start via button
bot.hears(["üöÄ –ó–∞–ø—É—Å—Ç–∏—Ç—å –æ–±—Ä–∞–±–æ—Ç–∫—É —Å–¥–µ–ª–æ–∫", "/run"], async (ctx) => {
  const session = getSession(ctx);
  // Ensure client configured
  const client = new BitrixClient(true);
  if (!client.isConfigured()) {
    await ctx.reply("Bitrix –Ω–µ –Ω–∞—Å—Ç—Ä–æ–µ–Ω. –£—Å—Ç–∞–Ω–æ–≤–∏—Ç–µ —Ç–æ–∫–µ–Ω—ã —á–µ—Ä–µ–∑ /set_tokens –∏–ª–∏ –∏—Å–ø–æ–ª—å–∑—É–π—Ç–µ /install (–ø—Ä–∏ —É—Å—Ç–∞–Ω–æ–≤–∫–µ –≤ Bitrix).");
    return;
  }
  const svc = new DealService(client);
  // fetch categories
  const cats = await svc.getCategories();
  session.categories = cats;
  if (!cats.length) {
    await ctx.reply("–í–æ—Ä–æ–Ω–∫–∏ –Ω–µ –Ω–∞–π–¥–µ–Ω—ã.");
    return;
  }
  // build inline keyboard
  const buttons = cats.map(c => Markup.button.callback(c.NAME, `cat_${c.ID}`));
  // chunk into rows of 2
  const rows: any[][] = [];
  for (let i = 0; i < buttons.length; i += 2) rows.push(buttons.slice(i, i + 2));
  await ctx.reply("–í—ã–±–µ—Ä–∏—Ç–µ –≤–æ—Ä–æ–Ω–∫—É:", Markup.inlineKeyboard(rows));
});

// callback handlers for category & stage selection
bot.action(/cat_(.+)/, async (ctx) => {
  const id = ctx.match[1];
  const session = getSession(ctx);
  const client = new BitrixClient(true);
  const svc = new DealService(client);
  const category = session.categories?.find((c: any) => String(c.ID) === String(id));
  session.category = category;
  // fetch stages
  const stages = await svc.getStages(Number(category.ID));
  session.stages = stages;
  if (!stages.length) {
    await ctx.reply("–°—Ç–∞–¥–∏–∏ –Ω–µ –Ω–∞–π–¥–µ–Ω—ã –¥–ª—è —ç—Ç–æ–π –≤–æ—Ä–æ–Ω–∫–∏.");
    return;
  }
  const buttons = stages.map(s => Markup.button.callback(s.NAME, `stage_${s.STATUS_ID}`));
  const rows: any[][] = [];
  for (let i = 0; i < buttons.length; i += 2) rows.push(buttons.slice(i, i + 2));
  await ctx.answerCbQuery();
  await ctx.reply(`–í—ã–±—Ä–∞–Ω–∞ –≤–æ—Ä–æ–Ω–∫–∞: ${category.NAME}\n–í—ã–±–µ—Ä–∏—Ç–µ —Å—Ç–∞–¥–∏—é:`, Markup.inlineKeyboard(rows));
});

bot.action(/stage_(.+)/, async (ctx) => {
  const id = ctx.match[1];
  const session = getSession(ctx);
  const client = new BitrixClient(true);
  const svc = new DealService(client);
  const stage = session.stages?.find((s: any) => String(s.STATUS_ID) === String(id));
  session.stage = stage;
  // fetch fields
  const fields = await svc.getDealUserFields();
  session.fields = fields;
  // present numbered list and ask for index
  const lines = fields.map((f, i) => `${i}: ${f.FIELD_NAME} (${f.USER_TYPE_ID ?? f.TYPE ?? "?"}) ${f.NAME ? "- " + f.NAME : ""}`);
  const preview = lines.slice(0, 200).join("\n"); // but send full list
  await ctx.answerCbQuery();
  await ctx.reply("–í—ã–±–µ—Ä–∏—Ç–µ –ø–æ–ª–µ (–æ—Ç–ø—Ä–∞–≤—å—Ç–µ –∏–Ω–¥–µ–∫—Å –ø–æ–ª—è):\n" + lines.join("\n"));
  session.step = "awaiting_field_index";
});

bot.launch().then(() => info("Telegram bot launched"));
process.once("SIGINT", () => bot.stop("SIGINT"));
process.once("SIGTERM", () => bot.stop("SIGTERM"));
