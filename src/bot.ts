// bot.ts ‚Äî corrected and completed version
import dotenv from "dotenv";
dotenv.config();

import fs from "fs";
import path from "path";
import { Telegraf, Markup } from "telegraf";
import { BitrixClient } from "./bitrixClient";
import { DealService, UserField } from "./dealService";
import { info, error } from "./logger";

const BOT_TOKEN = process.env.TG_BOT_TOKEN ?? process.env.TELEGRAM_BOT_TOKEN;
if (!BOT_TOKEN) {
  console.error("TG_BOT_TOKEN / TELEGRAM_BOT_TOKEN is required in env");
  process.exit(1);
}

const bot = new Telegraf(BOT_TOKEN);
const TOKENS_FILE = path.join(process.cwd(), "tokens.json");

// ----- session type -----
type Session = {
  step?: string;
  categories?: Array<any>;
  category?: any;
  stages?: Array<any>;
  stage?: any;
  fields?: UserField[];
  field?: UserField | null;
  fieldType?: "enum" | "string";
  enumValues?: Array<{ ID: string; VALUE?: string; NAME?: string }>;
  enumMode?: "cycle" | "single";
  chosenEnumId?: string | null;
  stringPattern?: string | null;
  maxDeals?: number | null;
  dryRun?: boolean | null;
};
const sessions = new Map<number, Session>();
function getSession(chatId: number): Session {
  if (!sessions.has(chatId)) sessions.set(chatId, {});
  return sessions.get(chatId)!;
}

function clientConfigured(): boolean {
  if (fs.existsSync(TOKENS_FILE)) return true;
  if (process.env.BITRIX_DOMAIN && process.env.BITRIX_ACCESS_TOKEN) return true;
  return false;
}

// ----- START -----
bot.start(async (ctx) => {
  const chatId = ctx.chat.id;
  sessions.set(chatId, {});
  await ctx.reply(
    "–ü—Ä–∏–≤–µ—Ç! –Ø –±–æ—Ç-–∏–Ω—Ç–µ—Ä—Ñ–µ–π—Å –¥–ª—è –º–∞—Å—Å–æ–≤–æ–π —Ä–∞–∑–º–µ—Ç–∫–∏ —Å–¥–µ–ª–æ–∫ (–ø–æ 150).",
    Markup.keyboard([
      ["üöÄ –ó–∞–ø—É—Å—Ç–∏—Ç—å –æ–±—Ä–∞–±–æ—Ç–∫—É"],
      ["‚öôÔ∏è –£—Å—Ç–∞–Ω–æ–≤–∏—Ç—å —Ç–æ–∫–µ–Ω—ã (—Ä—É—á–Ω–æ–π)"],
      ["‚ÑπÔ∏è –°—Ç–∞—Ç—É—Å"]
    ]).resize()
  );
});

// ----- STATUS -----
bot.hears(["‚ÑπÔ∏è –°—Ç–∞—Ç—É—Å", "/status"], async (ctx) => {
  const chatId = ctx.chat.id;
  const s = getSession(chatId);
  const tokensPresent = clientConfigured();
  const lines = [
    `Tokens present: ${tokensPresent ? "‚úÖ" : "‚ùå"}`,
    `Category: ${s.category?.NAME ?? "‚Äî"}`,
    `Stage: ${s.stage?.NAME ?? "‚Äî"}`,
    `Field: ${s.field?.FIELD_NAME ?? "‚Äî"}`,
    `Field type: ${s.fieldType ?? "‚Äî"}`,
  ];
  await ctx.reply(lines.join("\n"));
});

// ----- TOKENS MANUAL -----
bot.hears(["‚öôÔ∏è –£—Å—Ç–∞–Ω–æ–≤–∏—Ç—å —Ç–æ–∫–µ–Ω—ã (—Ä—É—á–Ω–æ–π)", "/set_tokens"], async (ctx) => {
  const s = getSession(ctx.chat.id);
  s.step = "awaiting_tokens_domain";
  await ctx.reply("–í–≤–µ–¥–∏—Ç–µ domain (–Ω–∞–ø—Ä–∏–º–µ—Ä yourportal.bitrix24.ru):");
});

// –æ–±—Ä–∞–±–æ—Ç–∫–∞ —Ç–µ–∫—Å—Ç–æ–≤—ã—Ö —à–∞–≥–æ–≤ (domain, token –∏ —Ç.–¥. + –≤—Å—è –ª–æ–≥–∏–∫–∞ –≤—ã–±–æ—Ä–∞ –ø–æ–ª–µ–π/—Å—Ç–∞–¥–∏–π)
bot.on("text", async (ctx) => {
 const chatId = ctx.chat.id;
 const s = getSession(chatId);
 const text = (ctx.message as any).text?.trim() ?? "";


 try {
   // --- token manual flow ---
   if (s.step === "awaiting_tokens_domain") {
     (s as any).tmpDomain = text;
     s.step = "awaiting_tokens_access";
     await ctx.reply("–í–≤–µ–¥–∏—Ç–µ access_token:");
     return;
   }
   if (s.step === "awaiting_tokens_access") {
     (s as any).tmpAccess = text;
     s.step = "awaiting_tokens_refresh";
     await ctx.reply("–ï—Å–ª–∏ –µ—Å—Ç—å refresh_token, –æ—Ç–ø—Ä–∞–≤—å—Ç–µ –µ–≥–æ —Å–µ–π—á–∞—Å (–∏–ª–∏ –ø—Ä–æ—Å—Ç–æ Enter):");
     return;
   }
   if (s.step === "awaiting_tokens_refresh") {
     const domain = (s as any).tmpDomain;
     const access = (s as any).tmpAccess;
     const refresh = text || null;
     const tokens = {
       domain,
       access_token: access,
       refresh_token: refresh,
       received_at: Date.now(),
     };
     fs.writeFileSync(TOKENS_FILE, JSON.stringify(tokens, null, 2), "utf-8");
     s.step = undefined;
     await ctx.reply("–¢–æ–∫–µ–Ω—ã —Å–æ—Ö—Ä–∞–Ω–µ–Ω—ã –≤ tokens.json ‚úÖ");
     return;
   }


   // --- awaiting field index (user types index after seeing numbered list) ---
   if (s.step === "awaiting_field_index") {
     const idx = Number(text);
     if (Number.isNaN(idx) || !s.fields || idx < 0 || idx >= s.fields.length) {
       await ctx.reply("–ù–µ–≤–µ—Ä–Ω—ã–π –∏–Ω–¥–µ–∫—Å –ø–æ–ª—è. –í–≤–µ–¥–∏—Ç–µ –∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–π –∏–Ω–¥–µ–∫—Å –∏–∑ —Å–ø–∏—Å–∫–∞.");
       return;
     }
     s.field = s.fields[idx];
     // detect type
     const ut = s.field.USER_TYPE_ID ?? s.field.TYPE;
     if (ut === "enumeration") {
       s.fieldType = "enum";
       // fetch enum values via DealService if possible
       try {
         const client = new BitrixClient(true);
         const svc = new DealService(client);
         s.enumValues = await svc.getEnumValuesForField(s.field!);
       } catch (err) {
         // fallback to field.LIST
         s.enumValues = s.field.LIST ?? [];
       }


       if (!s.enumValues || s.enumValues.length === 0) {
         await ctx.reply("Enum –ø–æ–ª–µ –Ω–µ —Å–æ–¥–µ—Ä–∂–∏—Ç –≤–∞—Ä–∏–∞–Ω—Ç–æ–≤. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –¥—Ä—É–≥–æ–µ –ø–æ–ª–µ –∏–ª–∏ –∏—Å–ø–æ–ª—å–∑—É–π—Ç–µ —Å—Ç—Ä–æ–∫–æ–≤–æ–µ –ø–æ–ª–µ.");
         s.step = undefined;
         return;
       }


       // Ask enum mode
       s.step = "awaiting_enum_mode";
       await ctx.reply(
         "Enum –ø–æ–ª–µ –≤—ã–±—Ä–∞–Ω–æ. –í—ã–±–µ—Ä–∏—Ç–µ —Ä–µ–∂–∏–º:\n1 ‚Äî –¶–∏–∫–ª–∏—á–µ—Å–∫–∏ (–∫–∞–∂–¥–æ–π –≥—Ä—É–ø–ø–µ —Å–≤–æ—ë –∑–Ω–∞—á–µ–Ω–∏–µ —Ü–∏–∫–ª–∏—á–Ω–æ)\n2 ‚Äî –û–¥–∏–Ω –≤–∞—Ä–∏–∞–Ω—Ç –¥–ª—è –≤—Å–µ—Ö –≥—Ä—É–ø–ø\n–û—Ç–ø—Ä–∞–≤—å—Ç–µ 1 –∏–ª–∏ 2."
       );
       return;
     } else if (ut === "string") {
       // string field
       s.fieldType = "string";
       s.step = "awaiting_string_pattern";
       await ctx.reply("–í–≤–µ–¥–∏—Ç–µ —Å—Ç—Ä–æ–∫–æ–≤—ã–π —à–∞–±–ª–æ–Ω (–∏—Å–ø–æ–ª—å–∑—É–π—Ç–µ {n} –∫–∞–∫ placeholder –¥–ª—è –Ω–æ–º–µ—Ä–∞ –≥—Ä—É–ø–ø—ã). –ü—Ä–∏–º–µ—Ä: 'Group {n}' –∏–ª–∏ –ø—Ä–æ—Å—Ç–æ '{n}':");
       return;
     } else {
       await ctx.reply(`–¢–∏–ø –ø–æ–ª—è '${ut}' –Ω–µ –ø–æ–¥–¥–µ—Ä–∂–∏–≤–∞–µ—Ç—Å—è (—Ç–æ–ª—å–∫–æ enumeration –∏–ª–∏ string). –í—ã–±–µ—Ä–∏—Ç–µ –¥—Ä—É–≥–æ–µ.`);
       s.step = undefined;
       return;
     }
   }


   // --- enum mode choice ---
   if (s.step === "awaiting_enum_mode") {
     if (text !== "1" && text !== "2") {
       await ctx.reply("–û—Ç–ø—Ä–∞–≤—å—Ç–µ 1 –∏–ª–∏ 2.");
       return;
     }
     if (text === "1") {
       s.enumMode = "cycle";
       s.step = "awaiting_max";
       await ctx.reply("–†–µ–∂–∏–º: cycling. –í–≤–µ–¥–∏—Ç–µ –º–∞–∫—Å–∏–º—É–º —Å–¥–µ–ª–æ–∫ –¥–ª—è –æ–±—Ä–∞–±–æ—Ç–∫–∏ (Enter = –≤—Å–µ):");
       return;
     } else {
       s.enumMode = "single";
       // present enum values and ask index
       const lines = s.enumValues!.map((ev, i) => `${i}: ID=${ev.ID} -> ${ev.VALUE ?? ev.NAME}`);
       await ctx.reply("–í–∞—Ä–∏–∞–Ω—Ç—ã enum:\n" + lines.join("\n"));
       s.step = "awaiting_enum_index";
       await ctx.reply(`–í–≤–µ–¥–∏—Ç–µ –∏–Ω–¥–µ–∫—Å –≤–∞—Ä–∏–∞–Ω—Ç–∞ (0..${s.enumValues!.length - 1}):`);
       return;
     }
   }


   if (s.step === "awaiting_enum_index") {
     const idx = Number(text);
     if (Number.isNaN(idx) || !s.enumValues || idx < 0 || idx >= s.enumValues.length) {
       await ctx.reply("–ù–µ–≤–µ—Ä–Ω—ã–π –∏–Ω–¥–µ–∫—Å enum-–∑–Ω–∞—á–µ–Ω–∏—è. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ —Å–Ω–æ–≤–∞.");
       return;
     }
     s.chosenEnumId = s.enumValues[idx].ID;
     s.step = "awaiting_max";
     await ctx.reply("–í–≤–µ–¥–∏—Ç–µ –º–∞–∫—Å–∏–º—É–º —Å–¥–µ–ª–æ–∫ –¥–ª—è –æ–±—Ä–∞–±–æ—Ç–∫–∏ (Enter = –≤—Å–µ):");
     return;
   }


   // --- string pattern provided ---
   if (s.step === "awaiting_string_pattern") {
     s.stringPattern = text || "{n}";
     s.step = "awaiting_max";
     await ctx.reply("–í–≤–µ–¥–∏—Ç–µ –º–∞–∫—Å–∏–º—É–º —Å–¥–µ–ª–æ–∫ –¥–ª—è –æ–±—Ä–∞–±–æ—Ç–∫–∏ (Enter = –≤—Å–µ):");
     return;
   }


   // --- max deals ---
   if (s.step === "awaiting_max") {
     s.maxDeals = text ? Number(text) : Infinity;
     if (Number.isNaN(s.maxDeals) || s.maxDeals <= 0) {
       await ctx.reply("–ù–µ–≤–µ—Ä–Ω–æ–µ —á–∏—Å–ª–æ. –ü–æ–≤—Ç–æ—Ä–∏—Ç–µ.");
       return;
     }
     s.step = "awaiting_dry";
     await ctx.reply("Dry run? –û—Ç–ø—Ä–∞–≤—å—Ç–µ yes (–ø–æ —É–º–æ–ª—á–∞–Ω–∏—é) –∏–ª–∏ no:");
     return;
   }


   // --- dry run ---
   if (s.step === "awaiting_dry") {
     s.dryRun = !text ? true : String(text).toLowerCase().startsWith("y");
     s.step = "confirm_run";
     // summary
     const summary = [
       `–°–≤–æ–¥–∫–∞:`,
       `–í–æ—Ä–æ–Ω–∫–∞: ${s.category?.NAME ?? "‚Äî"}`,
       `–°—Ç–∞–¥–∏—è: ${s.stage?.NAME ?? "‚Äî"}`,
       `–ü–æ–ª–µ: ${s.field?.FIELD_NAME ?? "‚Äî"}`,
       `–¢–∏–ø: ${s.fieldType}`,
       s.fieldType === "string" ? `–®–∞–±–ª–æ–Ω: ${s.stringPattern}` : s.enumMode === "cycle" ? `Enum: cycle (${s.enumValues!.length} values)` : `Enum single: ${s.chosenEnumId}`,
       `Max deals: ${s.maxDeals === Infinity ? "all" : s.maxDeals}`,
       `Dry run: ${s.dryRun ? "yes" : "no"}`,
     ].join("\n");
     await ctx.reply(summary);
     await ctx.reply("–ü–æ–¥—Ç–≤–µ—Ä–¥–∏—Ç—å –∑–∞–ø—É—Å–∫? yes / no");
     return;
   }


   // --- confirmation ---
   if (s.step === "confirm_run") {
     const yes = String(text).toLowerCase().startsWith("y");
     if (!yes) {
       s.step = undefined;
       await ctx.reply("–û–ø–µ—Ä–∞—Ü–∏—è –æ—Ç–º–µ–Ω–µ–Ω–∞.");
       return;
     }


     // final run
     if (!clientConfigured()) {
       await ctx.reply("Bitrix –Ω–µ –Ω–∞—Å—Ç—Ä–æ–µ–Ω (–Ω–µ—Ç —Ç–æ–∫–µ–Ω–æ–≤). –£—Å—Ç–∞–Ω–æ–≤–∏—Ç–µ —Ç–æ–∫–µ–Ω—ã —á–µ—Ä–µ–∑ /set_tokens –∏–ª–∏ —É—Å—Ç–∞–Ω–æ–≤–∏—Ç–µ –ø—Ä–∏–ª–æ–∂–µ–Ω–∏–µ –≤ Bitrix –¥–ª—è –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–æ–π –ø–µ—Ä–µ–¥–∞—á–∏ —Ç–æ–∫–µ–Ω–æ–≤ –≤ /install.");
       s.step = undefined;
       return;
     }


     await ctx.reply("–ó–∞–≥—Ä—É–∂–∞—é —Å–¥–µ–ª–∫–∏ (—ç—Ç–æ –º–æ–∂–µ—Ç –∑–∞–Ω—è—Ç—å –≤—Ä–µ–º—è)...");
     try {
       const client = new BitrixClient(true);
       const svc = new DealService(client);
       const filter: any = { CATEGORY_ID: Number(s.category.ID), STAGE_ID: s.stage.STATUS_ID ?? s.stage.ID };


       const deals = await svc.fetchDealsPaginated(filter, ["*", "UF_*"], { DATE_CREATE: "ASC" }, s.maxDeals ?? Infinity);
       await ctx.reply(`–ù–∞–π–¥–µ–Ω–æ —Å–¥–µ–ª–æ–∫: ${deals.length}`);
       if (deals.length === 0) {
         s.step = undefined;
         return;
       }


       let lastUpdate = 0;
       await svc.tagDealsByGroups(deals, s.field!.FIELD_NAME, {
         fieldType: s.fieldType === "string" ? "string" : "enum",
         enumValues: s.fieldType === "enum" ? (s.enumMode === "cycle" ? s.enumValues!.map(e => e.ID) : [s.chosenEnumId!]) : undefined,
         chunkSize: 150,
         dryRun: !!s.dryRun,
         stringPattern: s.stringPattern ?? "{n}",
         progressCb: async (info) => {
           const now = Date.now();
           if (now - lastUpdate < 1500) return; // throttle to ~1.5s
           lastUpdate = now;
           await ctx.reply(`Processed group ${info.groupIndex}/${info.totalGroups} ‚Äî processed: ${info.processed}/${deals.length}`);
         }
       });


       await ctx.reply(`‚úÖ –û–±—Ä–∞–±–æ—Ç–∫–∞ –∑–∞–≤–µ—Ä—à–µ–Ω–∞ (dry=${s.dryRun ? "yes" : "no"}).`);
     } catch (err: any) {
       error("Processing error:", err);
       await ctx.reply(`–û—à–∏–±–∫–∞: ${String(err.message || err)}`);
     } finally {
       s.step = undefined;
     }
     return;
   }


   // If none of the above matched, show help or ignore
   // Do nothing special for other arbitrary text
 } catch (err: any) {
   error("Bot text handler error:", err);
   await ctx.reply("–ü—Ä–æ–∏–∑–æ—à–ª–∞ –≤–Ω—É—Ç—Ä–µ–Ω–Ω—è—è –æ—à–∏–±–∫–∞. –°–º–æ—Ç—Ä–∏—Ç–µ –ª–æ–≥–∏.");
   s.step = undefined;
 }
});

// ----- RUN FLOW -----
async function startRunFlow(ctx: any) {
  const chatId = ctx.chat.id;
  const s = getSession(chatId);

  if (!clientConfigured()) {
    await ctx.reply("Bitrix –Ω–µ –Ω–∞—Å—Ç—Ä–æ–µ–Ω. –£—Å—Ç–∞–Ω–æ–≤–∏—Ç–µ —Ç–æ–∫–µ–Ω—ã —á–µ—Ä–µ–∑ /set_tokens –∏–ª–∏ —É—Å—Ç–∞–Ω–æ–≤–∏—Ç–µ –ª–æ–∫–∞–ª—å–Ω–æ–µ –ø—Ä–∏–ª–æ–∂–µ–Ω–∏–µ –≤ Bitrix.");
    return;
  }

  try {
    const client = new BitrixClient(true);
    const svc = new DealService(client);

    const cats = await svc.getCategories();
    s.categories = cats;

    if (!cats.length) {
      await ctx.reply("–í–æ—Ä–æ–Ω–∫–∏ –Ω–µ –Ω–∞–π–¥–µ–Ω—ã.");
      return;
    }

    const buttons = cats.map((c: any) => Markup.button.callback(c.NAME, `cat_${c.ID}`));
    const rows: any[][] = [];
    for (let i = 0; i < buttons.length; i += 2) rows.push(buttons.slice(i, i + 2));
    await ctx.reply("–í—ã–±–µ—Ä–∏—Ç–µ –≤–æ—Ä–æ–Ω–∫—É:", Markup.inlineKeyboard(rows));
  } catch (err: any) {
    error(err);
    await ctx.reply("–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ –≤–æ—Ä–æ–Ω–æ–∫: " + String(err.message || err));
  }
}

// –∑–∞–ø—É—Å–∫–∞–µ–º run –∏ —á–µ—Ä–µ–∑ –∫–æ–º–∞–Ω–¥—É, –∏ —á–µ—Ä–µ–∑ –∫–Ω–æ–ø–∫—É
bot.command("run", startRunFlow);
bot.hears(["üöÄ –ó–∞–ø—É—Å—Ç–∏—Ç—å –æ–±—Ä–∞–±–æ—Ç–∫—É"], startRunFlow);

// ----- INLINE CALLBACKS -----
bot.action(/cat_(.+)/, async (ctx) => {
  const id = ctx.match![1];
  const chatId = ctx.chat!.id;
  const s = getSession(chatId);
  if (!s.categories) return;
  const cat = s.categories.find((c: any) => String(c.ID) === String(id));
  if (!cat) {
    await ctx.answerCbQuery("–ö–∞—Ç–µ–≥–æ—Ä–∏—è –Ω–µ –Ω–∞–π–¥–µ–Ω–∞");
    return;
  }
  s.category = cat;
  await ctx.answerCbQuery();
  await ctx.reply(`–ö–∞—Ç–µ–≥–æ—Ä–∏—è –≤—ã–±—Ä–∞–Ω–∞: ${cat.NAME}`);

  try {
    const client = new BitrixClient(true);
    const svc = new DealService(client);
    const stages = await svc.getStages(Number(cat.ID));
    s.stages = stages;
    if (!stages.length) {
      await ctx.reply("–°—Ç–∞–¥–∏–∏ –Ω–µ –Ω–∞–π–¥–µ–Ω—ã –¥–ª—è —ç—Ç–æ–π –≤–æ—Ä–æ–Ω–∫–∏.");
      return;
    }
    const buttons = stages.map((st: any) => Markup.button.callback(st.NAME, `stage_${st.STATUS_ID}`));
    const rows: any[][] = [];
    for (let i = 0; i < buttons.length; i += 2) rows.push(buttons.slice(i, i + 2));
    await ctx.reply("–í—ã–±–µ—Ä–∏—Ç–µ —Å—Ç–∞–¥–∏—é:", Markup.inlineKeyboard(rows));
  } catch (err: any) {
    error(err);
    await ctx.reply("–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ —Å—Ç–∞–¥–∏–π: " + String(err.message || err));
  }
});

bot.action(/stage_(.+)/, async (ctx) => {
  const id = ctx.match![1];
  const chatId = ctx.chat!.id;
  const s = getSession(chatId);
  if (!s.stages) return;
  const st = s.stages.find((x: any) => String(x.STATUS_ID) === String(id));
  if (!st) {
    await ctx.answerCbQuery("–°—Ç–∞–¥–∏—è –Ω–µ –Ω–∞–π–¥–µ–Ω–∞");
    return;
  }
  s.stage = st;
  await ctx.answerCbQuery();
  await ctx.reply(`–°—Ç–∞–¥–∏—è –≤—ã–±—Ä–∞–Ω–∞: ${st.NAME}`);

  try {
    const client = new BitrixClient(true);
    const svc = new DealService(client);
    const fields = await svc.getDealUserFields();
    s.fields = fields.filter(f => (f.USER_TYPE_ID === "enumeration" || f.USER_TYPE_ID === "string") && f.MULTIPLE !== "Y"); // filter supported types, exclude multiple for simplicity

    if (!s.fields || s.fields.length === 0) {
      await ctx.reply("–ü–æ–¥—Ö–æ–¥—è—â–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å—Å–∫–∏–µ –ø–æ–ª—è –Ω–µ –Ω–∞–π–¥–µ–Ω—ã (—Ç–æ–ª—å–∫–æ string/enumeration, –Ω–µ –º–Ω–æ–∂–µ—Å—Ç–≤–µ–Ω–Ω—ã–µ).");
      return;
    }

    const lines = s.fields.map((f, i) => `${i}: ${f.FIELD_NAME} ${f.NAME ? "- " + f.NAME : ""} (${f.USER_TYPE_ID ?? f.TYPE ?? "?"})`);
    const CHUNK = 1800;
    let buf = "";
    for (const line of lines) {
      if (buf.length + line.length + 1 > CHUNK) {
        await ctx.reply(buf);
        buf = "";
      }
      buf += line + "\n";
    }
    if (buf.length) await ctx.reply(buf);

    s.step = "awaiting_field_index";
    await ctx.reply(`–û—Ç–ø—Ä–∞–≤—å—Ç–µ –∏–Ω–¥–µ–∫—Å –ø–æ–ª—è (0..${s.fields.length - 1}):`);
  } catch (err: any) {
    error(err);
    await ctx.reply("–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ –ø–æ–ª–µ–π: " + String(err.message || err));
  }
});

// ----- START BOT -----
bot.launch().then(() => info("Bot launched")).catch(err => {
  console.error("Failed to launch bot:", err);
});
process.once("SIGINT", () => bot.stop("SIGINT"));
process.once("SIGTERM", () => bot.stop("SIGTERM"));